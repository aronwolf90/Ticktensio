[{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `plugin` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"5544d63681df9f8a6bf6118e9890175a","location":{"path":"app/javascript/vue_turbolinks.js","lines":{"begin":15,"end":35}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `padStart` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.","fingerprint":"c46adec60383837e95f7c818ed43c1d3","location":{"path":"app/javascript/polyfill.js","lines":{"begin":3,"end":16}},"other_locations":[],"remediation_points":450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `keys` has 31 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"359df0bc4ad0a5ce268b01b090a0a167","location":{"path":"app/javascript/polyfill.js","lines":{"begin":20,"end":57}},"other_locations":[],"remediation_points":744000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Method `saved` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"a958b24559de4fca90e13d4102c6ea3d","location":{"path":"app/controllers/concerns/mvc_modify_standard_actions_concern.rb","lines":{"begin":18,"end":18}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"argument_count","content":{"body":""},"description":"Method `cell` has 5 arguments (exceeds 4 allowed). Consider refactoring.","fingerprint":"e45a68c1f91602d2c2f82e241bc1f245","location":{"path":"app/controllers/application_controller.rb","lines":{"begin":34,"end":34}},"other_locations":[],"remediation_points":375000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Method `create` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.","fingerprint":"eb9fa57b0292feb157c24608cfdfde17","location":{"path":"app/controllers/sessions_controller.rb","lines":{"begin":4,"end":14}},"other_locations":[],"remediation_points":250000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Method `structure_dump` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"cd417d46be50602550879a2cc9a9dd3c","location":{"path":"config/initializers/hacks/structure_sql.rb","lines":{"begin":6,"end":38}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Method `get_value_from_input` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.","fingerprint":"fa115fc12d004ec649bf69e193a51b00","location":{"path":"config/initializers/hacks/hash_mapper.rb","lines":{"begin":21,"end":32}},"other_locations":[],"remediation_points":350000,"severity":"minor","type":"issue","engine_name":"structure"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/issue/show.spec.js","lines":{"begin":18,"end":62}},"remediation_points":14910000,"other_locations":[{"path":"spec/javascript/wiki_page/show.spec.js","lines":{"begin":18,"end":62}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 532**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3ec05d47dcbcf6e21d8d00d134193aea","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/wiki_page/show.spec.js","lines":{"begin":18,"end":62}},"remediation_points":14910000,"other_locations":[{"path":"spec/javascript/issue/show.spec.js","lines":{"begin":18,"end":62}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 532**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"af021acd01612c75dcbf558390c5dca1","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/archive_content.spec.js","lines":{"begin":13,"end":28}},"remediation_points":5100000,"other_locations":[{"path":"spec/javascript/wiki_content.spec.js","lines":{"begin":13,"end":28}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 205**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3b5913807a862a3dc42b549ced0836b7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/wiki_content.spec.js","lines":{"begin":13,"end":28}},"remediation_points":5100000,"other_locations":[{"path":"spec/javascript/archive_content.spec.js","lines":{"begin":13,"end":28}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 205**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2cc5ec35590c64b0837c55744a39b9c4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/list.spec.js","lines":{"begin":48,"end":51}},"remediation_points":2340000,"other_locations":[{"path":"spec/javascript/board.spec.js","lines":{"begin":39,"end":42}},{"path":"spec/javascript/board/list.spec.js","lines":{"begin":53,"end":56}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 113**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"784f34c1e4b8855ed4c3d1aca80ffdeb","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/list.spec.js","lines":{"begin":53,"end":56}},"remediation_points":2340000,"other_locations":[{"path":"spec/javascript/board.spec.js","lines":{"begin":39,"end":42}},{"path":"spec/javascript/board/list.spec.js","lines":{"begin":48,"end":51}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 113**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"784f34c1e4b8855ed4c3d1aca80ffdeb","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board.spec.js","lines":{"begin":39,"end":42}},"remediation_points":2340000,"other_locations":[{"path":"spec/javascript/board/list.spec.js","lines":{"begin":48,"end":51}},{"path":"spec/javascript/board/list.spec.js","lines":{"begin":53,"end":56}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 113**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b459b896666cf113310d39ac8d4e340a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/event_actions.js","lines":{"begin":16,"end":23}},"remediation_points":1710000,"other_locations":[{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":36,"end":43}},{"path":"app/javascript/store/models/wiki_page_actions.js","lines":{"begin":7,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 92**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"91487f9da4a5116cb93ea9ad6bb497b9","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":36,"end":43}},"remediation_points":1710000,"other_locations":[{"path":"app/javascript/store/models/event_actions.js","lines":{"begin":16,"end":23}},{"path":"app/javascript/store/models/wiki_page_actions.js","lines":{"begin":7,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 92**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a9d3c02f08f213c344bb5c8dc782de0d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/wiki_page_actions.js","lines":{"begin":7,"end":14}},"remediation_points":1710000,"other_locations":[{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":36,"end":43}},{"path":"app/javascript/store/models/event_actions.js","lines":{"begin":16,"end":23}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 92**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c0fe945162c851c7c2cf61039ba3d179","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":53,"end":64}},"remediation_points":2880000,"other_locations":[{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":66,"end":77}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 131**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"477a7580e69f739c8d542ef1013c3bc7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":66,"end":77}},"remediation_points":2880000,"other_locations":[{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":53,"end":64}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 131**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"477a7580e69f739c8d542ef1013c3bc7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/attendances.spec.js","lines":{"begin":57,"end":66}},"remediation_points":2370000,"other_locations":[{"path":"spec/javascript/attendances.spec.js","lines":{"begin":67,"end":76}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 114**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6f055e74ebadc7db7f6edc066ae1b666","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/attendances.spec.js","lines":{"begin":67,"end":76}},"remediation_points":2370000,"other_locations":[{"path":"spec/javascript/attendances.spec.js","lines":{"begin":57,"end":66}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 114**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6f055e74ebadc7db7f6edc066ae1b666","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/archive_content/folder.spec.js","lines":{"begin":16,"end":30}},"remediation_points":2220000,"other_locations":[{"path":"spec/javascript/wiki_content/category.spec.js","lines":{"begin":16,"end":30}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 109**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"25761ad1c8f4538057b909610518f3cf","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/wiki_content/category.spec.js","lines":{"begin":16,"end":30}},"remediation_points":2220000,"other_locations":[{"path":"spec/javascript/archive_content/folder.spec.js","lines":{"begin":16,"end":30}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 109**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"8c3da27e78ae8d04a567cd510ea5d9bc","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":39,"end":41}},"remediation_points":480000,"other_locations":[{"path":"spec/javascript/board/issue.spec.js","lines":{"begin":49,"end":51}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 51**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1f32d144fabccc97eb79697ea6ecc8d7","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/issue.spec.js","lines":{"begin":49,"end":51}},"remediation_points":480000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":39,"end":41}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 51**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"68601ca00d98e585807e5b252e7e6429","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":43,"end":49}},"remediation_points":960000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":50,"end":56}},{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":57,"end":63}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 67**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7c9e81ec6f5f2cd6b3e4f4dd585c3301","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":50,"end":56}},"remediation_points":960000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":43,"end":49}},{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":57,"end":63}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 67**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7c9e81ec6f5f2cd6b3e4f4dd585c3301","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":57,"end":63}},"remediation_points":960000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":43,"end":49}},{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":50,"end":56}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 67**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7c9e81ec6f5f2cd6b3e4f4dd585c3301","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":17,"end":24}},"remediation_points":1740000,"other_locations":[{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":27,"end":34}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 93**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ed732f2241b6017360a0bcafeb172628","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":27,"end":34}},"remediation_points":1740000,"other_locations":[{"path":"app/javascript/store/models/board_list_actions.js","lines":{"begin":17,"end":24}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 93**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ed732f2241b6017360a0bcafeb172628","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section.spec.js","lines":{"begin":25,"end":28}},"remediation_points":330000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":24,"end":27}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e1ddd183991029e1a4cdc6404d9b48bb","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_record.spec.js","lines":{"begin":24,"end":27}},"remediation_points":330000,"other_locations":[{"path":"spec/javascript/shared_issue_section.spec.js","lines":{"begin":25,"end":28}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"837f90affb2188aeab1d2bc7b377137f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_issue.spec.js","lines":{"begin":36,"end":41}},"remediation_points":780000,"other_locations":[{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":37,"end":44}},{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":45,"end":52}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"5846fe5e81d2960b0d937ceb1d313bc4","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":37,"end":44}},"remediation_points":780000,"other_locations":[{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":45,"end":52}},{"path":"spec/javascript/shared_issue_section/current_issue.spec.js","lines":{"begin":36,"end":41}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26c8e3b7db7260c3d777cafafd26575b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":45,"end":52}},"remediation_points":780000,"other_locations":[{"path":"spec/javascript/board/search_select.spec.js","lines":{"begin":37,"end":44}},{"path":"spec/javascript/shared_issue_section/current_issue.spec.js","lines":{"begin":36,"end":41}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26c8e3b7db7260c3d777cafafd26575b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/wiki_category_getters.js","lines":{"begin":3,"end":12}},"remediation_points":1140000,"other_locations":[{"path":"app/javascript/store/models/folder_getters.js","lines":{"begin":3,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 73**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f1c1d3c0aca9a326c615091ca574e94a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/folder_getters.js","lines":{"begin":3,"end":12}},"remediation_points":1140000,"other_locations":[{"path":"app/javascript/store/models/wiki_category_getters.js","lines":{"begin":3,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 73**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"774b790c3e92988bce464a4176543e34","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/issues_search_section.spec.js","lines":{"begin":42,"end":48}},"remediation_points":990000,"other_locations":[{"path":"spec/javascript/shared_issue_section/issues_search_section.spec.js","lines":{"begin":49,"end":55}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 68**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"502fafd9d7f6b49e75165d1537792f99","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/issues_search_section.spec.js","lines":{"begin":49,"end":55}},"remediation_points":990000,"other_locations":[{"path":"spec/javascript/shared_issue_section/issues_search_section.spec.js","lines":{"begin":42,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 68**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"502fafd9d7f6b49e75165d1537792f99","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/shared_issue_section/current_issue.spec.js","lines":{"begin":47,"end":51}},"remediation_points":840000,"other_locations":[{"path":"spec/javascript/wiki_page/edit.spec.js","lines":{"begin":73,"end":77}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 63**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2ad2aef7944dabc1d0c18f4f9ea10f80","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/javascript/wiki_page/edit.spec.js","lines":{"begin":73,"end":77}},"remediation_points":840000,"other_locations":[{"path":"spec/javascript/shared_issue_section/current_issue.spec.js","lines":{"begin":47,"end":51}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 63**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bba82c46431f1a46ecb9a1df99964f4a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/attendance_days_actions.js","lines":{"begin":5,"end":12}},"remediation_points":780000,"other_locations":[{"path":"app/javascript/store/models/attendance_event_actions.js","lines":{"begin":5,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e10d62a6a079d1e7a16e09d035fe5e2d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/attendance_event_actions.js","lines":{"begin":5,"end":12}},"remediation_points":780000,"other_locations":[{"path":"app/javascript/store/models/attendance_days_actions.js","lines":{"begin":5,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 61**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"487350392b593fc8834e0d0fe96be593","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/issue_actions.js","lines":{"begin":31,"end":38}},"remediation_points":690000,"other_locations":[{"path":"app/javascript/store/models/wiki_category_actions.js","lines":{"begin":10,"end":17}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"34f0220bacacde4dc8eb154d23c3b932","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/javascript/store/models/wiki_category_actions.js","lines":{"begin":10,"end":17}},"remediation_points":690000,"other_locations":[{"path":"app/javascript/store/models/issue_actions.js","lines":{"begin":31,"end":38}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 58**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"fa852aa5f4622d63738b2cb01ea3b65d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"94a7f11fda4f572b41d87b7019078e63","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ec8425b11354ce0ba8f5c67bbed236de","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"73a872816d7d84c5ebbb3fd64b53324b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"61f899926f7c8c692aa91031c677207a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7c91b98ae909943764bc21d3b3ef76a7","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"860947b1c3158cabe0407e71c7650210","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 7 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/wiki_page_policy_spec.rb","lines":{"begin":4,"end":58}},"remediation_points":2370000,"other_locations":[{"path":"spec/policies/contact_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/document_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/event_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/folder_policy_spec.rb","lines":{"begin":4,"end":58}},{"path":"spec/policies/issue_policy_spec.rb","lines":{"begin":6,"end":60}},{"path":"spec/policies/wiki_category_policy_spec.rb","lines":{"begin":4,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 136**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d4b164235c98cad41b81229991d9a2ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/employee_policy_spec.rb","lines":{"begin":4,"end":40}},"remediation_points":1510000,"other_locations":[{"path":"spec/policies/admin_policy_spec.rb","lines":{"begin":4,"end":40}},{"path":"spec/policies/customer_policy_spec.rb","lines":{"begin":4,"end":40}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 93**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bfdefb705bf1d51ca8d37ee45eb6c4bb","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/admin_policy_spec.rb","lines":{"begin":4,"end":40}},"remediation_points":1510000,"other_locations":[{"path":"spec/policies/customer_policy_spec.rb","lines":{"begin":4,"end":40}},{"path":"spec/policies/employee_policy_spec.rb","lines":{"begin":4,"end":40}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 93**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"666ac7a4725061487f6ef31bc151e424","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/customer_policy_spec.rb","lines":{"begin":4,"end":40}},"remediation_points":1510000,"other_locations":[{"path":"spec/policies/admin_policy_spec.rb","lines":{"begin":4,"end":40}},{"path":"spec/policies/employee_policy_spec.rb","lines":{"begin":4,"end":40}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 93**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"54f28928596372de1ca7744229618d4b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/customers_serializer_spec.rb","lines":{"begin":5,"end":53}},"remediation_points":1710000,"other_locations":[{"path":"spec/serializers/api/v1/admin_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/employees_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/user_serializer_spec.rb","lines":{"begin":5,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"cc86833781c173979b515936f492b178","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/admin_serializer_spec.rb","lines":{"begin":5,"end":53}},"remediation_points":1710000,"other_locations":[{"path":"spec/serializers/api/v1/customers_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/employees_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/user_serializer_spec.rb","lines":{"begin":5,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"102fc5a9777469b542e9c10e42de5cea","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/employees_serializer_spec.rb","lines":{"begin":5,"end":53}},"remediation_points":1710000,"other_locations":[{"path":"spec/serializers/api/v1/admin_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/customers_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/user_serializer_spec.rb","lines":{"begin":5,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ce2356774f9e560956444cc006d0fed1","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/user_serializer_spec.rb","lines":{"begin":5,"end":53}},"remediation_points":1710000,"other_locations":[{"path":"spec/serializers/api/v1/admin_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/customers_serializer_spec.rb","lines":{"begin":5,"end":53}},{"path":"spec/serializers/api/v1/employees_serializer_spec.rb","lines":{"begin":5,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 103**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1b7fad3fc9b1975af6efd3aec44a4905","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/records/update_operation_spec.rb","lines":{"begin":12,"end":27}},"remediation_points":450000,"other_locations":[{"path":"spec/forms/api/v1/records/update_form_spec.rb","lines":{"begin":8,"end":23}},{"path":"spec/operations/api/v1/records/create_operation_spec.rb","lines":{"begin":14,"end":29}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ec4e1606d1fa6e90b1f216f80bbea606","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/records/create_operation_spec.rb","lines":{"begin":14,"end":29}},"remediation_points":450000,"other_locations":[{"path":"spec/forms/api/v1/records/update_form_spec.rb","lines":{"begin":8,"end":23}},{"path":"spec/operations/api/v1/records/update_operation_spec.rb","lines":{"begin":12,"end":27}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e0491f6b8438b4064cd93a15197054e3","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/records/update_form_spec.rb","lines":{"begin":8,"end":23}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/records/create_operation_spec.rb","lines":{"begin":14,"end":29}},{"path":"spec/operations/api/v1/records/update_operation_spec.rb","lines":{"begin":12,"end":27}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"877c6f41386fbec93ce954e10916dd8b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/views/administration/records/index_spec.rb","lines":{"begin":5,"end":67}},"remediation_points":3170000,"other_locations":[{"path":"spec/views/administration/projects/records/index_spec.rb","lines":{"begin":5,"end":67}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c87199750efa7d3f66f1ca6cdf397662","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/views/administration/projects/records/index_spec.rb","lines":{"begin":5,"end":67}},"remediation_points":3170000,"other_locations":[{"path":"spec/views/administration/records/index_spec.rb","lines":{"begin":5,"end":67}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f2594aa1baeae5ab02e96950092536cc","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/events/update_operation_spec.rb","lines":{"begin":5,"end":57}},"remediation_points":2610000,"other_locations":[{"path":"spec/operations/api/v1/attendance_events/update_operation_spec.rb","lines":{"begin":5,"end":59}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 148**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7b3a50443a440b2d2596242442d3ed52","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/attendance_events/update_operation_spec.rb","lines":{"begin":5,"end":59}},"remediation_points":2610000,"other_locations":[{"path":"spec/operations/api/v1/events/update_operation_spec.rb","lines":{"begin":5,"end":57}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 148**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e335541453c2966b052f1738d832b08f","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/board_list_policy_spec.rb","lines":{"begin":5,"end":60}},"remediation_points":2310000,"other_locations":[{"path":"spec/policies/project_policy_spec.rb","lines":{"begin":5,"end":60}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 133**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c6e15a52de083715a24c3fac5eecdaff","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/project_policy_spec.rb","lines":{"begin":5,"end":60}},"remediation_points":2310000,"other_locations":[{"path":"spec/policies/board_list_policy_spec.rb","lines":{"begin":5,"end":60}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 133**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"df20a64964250a47100bf482ef05c867","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/mutations/records/create_mutation_spec.rb","lines":{"begin":42,"end":57}},"remediation_points":790000,"other_locations":[{"path":"spec/mutations/records/update_mutation_spec.rb","lines":{"begin":46,"end":61}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 57**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9c224b27358a741759390e9d73eacd3d","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/mutations/records/update_mutation_spec.rb","lines":{"begin":46,"end":61}},"remediation_points":790000,"other_locations":[{"path":"spec/mutations/records/create_mutation_spec.rb","lines":{"begin":42,"end":57}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 57**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"72b7bcd5dd1392df690fa28e0bb82b4b","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 6 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/5_records.rb","lines":{"begin":43,"end":48}},"remediation_points":190000,"other_locations":[{"path":"db/fixtures/development/5_records.rb","lines":{"begin":3,"end":8}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":11,"end":16}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":19,"end":24}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":27,"end":32}},{"path":"db/fixtures/development/5_records.rb","lines":{"begin":35,"end":40}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 27**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"26f413251eb57711bb2543848fc25c6a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":42,"end":52}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":48,"end":58}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"eac6114076a1ed22626188560834fd80","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":48,"end":58}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":42,"end":52}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"71948c19153fab912096f25bd5a505ed","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/contacts/create_form_spec.rb","lines":{"begin":5,"end":35}},"remediation_points":1130000,"other_locations":[{"path":"spec/forms/api/v1/contacts/update_form_spec.rb","lines":{"begin":5,"end":34}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"cdbadfba490e352aa230399c3b8b0184","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/contacts/update_form_spec.rb","lines":{"begin":5,"end":34}},"remediation_points":1130000,"other_locations":[{"path":"spec/forms/api/v1/contacts/create_form_spec.rb","lines":{"begin":5,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 74**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"80ea2420ec098efdcff2d04baee201b1","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/folder_serializer_spec.rb","lines":{"begin":5,"end":32}},"remediation_points":1110000,"other_locations":[{"path":"spec/serializers/api/v1/wiki_category_serializer_spec.rb","lines":{"begin":5,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 73**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b91dd3c73068eee2a6329f6d6d581d62","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/serializers/api/v1/wiki_category_serializer_spec.rb","lines":{"begin":5,"end":32}},"remediation_points":1110000,"other_locations":[{"path":"spec/serializers/api/v1/folder_serializer_spec.rb","lines":{"begin":5,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 73**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"18f739f25e181f7ea35ef0d379a520bf","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":33,"end":37}},"remediation_points":230000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":48,"end":54}},{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":100,"end":106}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":41,"end":45}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":49,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d7327a05f8b9bab2c51fd5ab5bedebca","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":41,"end":45}},"remediation_points":230000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":48,"end":54}},{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":100,"end":106}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":33,"end":37}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":49,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d7327a05f8b9bab2c51fd5ab5bedebca","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":49,"end":53}},"remediation_points":230000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":48,"end":54}},{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":100,"end":106}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":33,"end":37}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":41,"end":45}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d7327a05f8b9bab2c51fd5ab5bedebca","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":48,"end":54}},"remediation_points":230000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":100,"end":106}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":33,"end":37}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":41,"end":45}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":49,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d3cf92e2eadc160abda97485148db25d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 5 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":100,"end":106}},"remediation_points":230000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":48,"end":54}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":33,"end":37}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":41,"end":45}},{"path":"spec/forms/api/v1/records/create_form_spec.rb","lines":{"begin":49,"end":53}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d3cf92e2eadc160abda97485148db25d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/shared_examples/create_action.rb","lines":{"begin":37,"end":45}},"remediation_points":330000,"other_locations":[{"path":"spec/controllers/api/v1/shared_examples/update_action.rb","lines":{"begin":39,"end":47}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"20556e7a26fcf7a8cc1816abf3fb15fc","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/shared_examples/update_action.rb","lines":{"begin":39,"end":47}},"remediation_points":330000,"other_locations":[{"path":"spec/controllers/api/v1/shared_examples/create_action.rb","lines":{"begin":37,"end":45}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0222e185f0a8dc073b37ae45c934596c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":9,"end":22}},"remediation_points":970000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":117,"end":130}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 66**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ea034139a5d744063e68846ab3b5f8ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":117,"end":130}},"remediation_points":970000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":9,"end":22}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 66**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"ea034139a5d744063e68846ab3b5f8ce","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":83,"end":87}},"remediation_points":310000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":110,"end":114}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"56c959729ac89acb2ac7442b9e7900f5","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":110,"end":114}},"remediation_points":310000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":83,"end":87}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"56c959729ac89acb2ac7442b9e7900f5","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":46,"end":52}},"remediation_points":310000,"other_locations":[{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":34,"end":38}},{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":29,"end":32}},{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":32,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"acec9801b8030d95c6a2d46e619cc8ba","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":29,"end":32}},"remediation_points":310000,"other_locations":[{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":34,"end":38}},{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":46,"end":52}},{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":32,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0e01934e395aca73714d75a2ad001222","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":32,"end":35}},"remediation_points":310000,"other_locations":[{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":34,"end":38}},{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":29,"end":32}},{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":46,"end":52}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"304cffdfc6a4f6335c3d1b61ef4f4729","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/attendance_events/create_operation_spec.rb","lines":{"begin":34,"end":38}},"remediation_points":310000,"other_locations":[{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":29,"end":32}},{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":46,"end":52}},{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":32,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 33**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"4b3fdaf6b3febb7adc644c7f3ebc8dec","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/contacts/update_operation_spec.rb","lines":{"begin":47,"end":60}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":62,"end":73}},{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":45,"end":56}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1d653bb453275478f19dc8ab0cfee687","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":62,"end":73}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/contacts/update_operation_spec.rb","lines":{"begin":47,"end":60}},{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":45,"end":56}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"8aaa32d3d80573ee430161ac0f02fe47","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/events/create_operation_spec.rb","lines":{"begin":45,"end":56}},"remediation_points":450000,"other_locations":[{"path":"spec/operations/api/v1/contacts/create_operation_spec.rb","lines":{"begin":62,"end":73}},{"path":"spec/operations/api/v1/contacts/update_operation_spec.rb","lines":{"begin":47,"end":60}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 40**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2b591a77fa190eb298b05f3c3b584169","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/shared_examples/create_action.rb","lines":{"begin":26,"end":33}},"remediation_points":230000,"other_locations":[{"path":"spec/controllers/api/v1/shared_examples/update_action.rb","lines":{"begin":28,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"840832a7f3667e7ed9fbc883a49ea052","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/shared_examples/update_action.rb","lines":{"begin":28,"end":35}},"remediation_points":230000,"other_locations":[{"path":"spec/controllers/api/v1/shared_examples/create_action.rb","lines":{"begin":26,"end":33}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b569753946c5159ce59b6773494a4d8a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/2_users.rb","lines":{"begin":3,"end":10}},"remediation_points":210000,"other_locations":[{"path":"db/fixtures/development/2_users.rb","lines":{"begin":13,"end":20}},{"path":"db/fixtures/development/2_users.rb","lines":{"begin":23,"end":30}},{"path":"db/fixtures/production/2_users.rb","lines":{"begin":4,"end":11}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f7a6cb807788d1ccc85ec3425206ee0a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/2_users.rb","lines":{"begin":13,"end":20}},"remediation_points":210000,"other_locations":[{"path":"db/fixtures/development/2_users.rb","lines":{"begin":3,"end":10}},{"path":"db/fixtures/development/2_users.rb","lines":{"begin":23,"end":30}},{"path":"db/fixtures/production/2_users.rb","lines":{"begin":4,"end":11}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f7a6cb807788d1ccc85ec3425206ee0a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/development/2_users.rb","lines":{"begin":23,"end":30}},"remediation_points":210000,"other_locations":[{"path":"db/fixtures/development/2_users.rb","lines":{"begin":3,"end":10}},{"path":"db/fixtures/development/2_users.rb","lines":{"begin":13,"end":20}},{"path":"db/fixtures/production/2_users.rb","lines":{"begin":4,"end":11}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f7a6cb807788d1ccc85ec3425206ee0a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"db/fixtures/production/2_users.rb","lines":{"begin":4,"end":11}},"remediation_points":210000,"other_locations":[{"path":"db/fixtures/development/2_users.rb","lines":{"begin":3,"end":10}},{"path":"db/fixtures/development/2_users.rb","lines":{"begin":13,"end":20}},{"path":"db/fixtures/development/2_users.rb","lines":{"begin":23,"end":30}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"78164838784b510e22131791268de968","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/administration/wiki/categories_controller_spec.rb","lines":{"begin":6,"end":19}},"remediation_points":770000,"other_locations":[{"path":"spec/controllers/administration/archive/folders_controller_spec.rb","lines":{"begin":6,"end":23}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 56**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b19dbb7d5f91440a6dbd7974b09b511a","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/administration/archive/folders_controller_spec.rb","lines":{"begin":6,"end":23}},"remediation_points":770000,"other_locations":[{"path":"spec/controllers/administration/wiki/categories_controller_spec.rb","lines":{"begin":6,"end":19}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 56**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"8cfe901639b273613f187d70930d0731","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":8,"end":27}},"remediation_points":210000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/update_form_spec.rb","lines":{"begin":8,"end":27}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"058786ffc230f7473d8934a6c784cd6c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/update_form_spec.rb","lines":{"begin":8,"end":27}},"remediation_points":210000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":8,"end":27}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b529d075a8ce1b64907c29b751ea7423","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":9,"end":18}},"remediation_points":210000,"other_locations":[{"path":"spec/forms/api/v1/comments/create_form_spec.rb","lines":{"begin":8,"end":17}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"42405f01d7c8324f1e97456a64bcae67","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/comments/create_form_spec.rb","lines":{"begin":8,"end":17}},"remediation_points":210000,"other_locations":[{"path":"spec/operations/api/v1/comments/create_operation_spec.rb","lines":{"begin":9,"end":18}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"0319672bd90de4b8bcb1c1de7de1752a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/board_lists/update_operation_spec.rb","lines":{"begin":15,"end":25}},"remediation_points":150000,"other_locations":[{"path":"spec/forms/api/v1/board_lists/update_form_spec.rb","lines":{"begin":8,"end":18}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3492a4f94e8945bdd720bbedc136cc1d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"identical-code","description":"Identical blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/board_lists/update_form_spec.rb","lines":{"begin":8,"end":18}},"remediation_points":150000,"other_locations":[{"path":"spec/operations/api/v1/board_lists/update_operation_spec.rb","lines":{"begin":15,"end":25}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"801a7437634027713a7af2448f4d06e2","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/record_policy_spec.rb","lines":{"begin":37,"end":51}},"remediation_points":590000,"other_locations":[{"path":"spec/policies/record_policy_spec.rb","lines":{"begin":56,"end":70}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"18d30cb04e8f8cee8a883ba36cbde36d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/policies/record_policy_spec.rb","lines":{"begin":56,"end":70}},"remediation_points":590000,"other_locations":[{"path":"spec/policies/record_policy_spec.rb","lines":{"begin":37,"end":51}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 47**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"18d30cb04e8f8cee8a883ba36cbde36d","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/attendance_events/create_form.rb","lines":{"begin":4,"end":20}},"remediation_points":570000,"other_locations":[{"path":"app/forms/api/v1/attendance_events/update_form.rb","lines":{"begin":5,"end":21}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"7133e9e1e663d0bc6f3d22f8083e4f59","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/attendance_events/update_form.rb","lines":{"begin":5,"end":21}},"remediation_points":570000,"other_locations":[{"path":"app/forms/api/v1/attendance_events/create_form.rb","lines":{"begin":4,"end":20}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 46**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c585f7fc300a03e10aafbefa92e4e77c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/events/create_form.rb","lines":{"begin":5,"end":15}},"remediation_points":210000,"other_locations":[{"path":"app/forms/api/v1/events/update_form.rb","lines":{"begin":5,"end":15}},{"path":"app/forms/api/v1/wiki_pages/update_form.rb","lines":{"begin":4,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6b67fd37ee9d0b7b95ae9f757fc3038f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/events/update_form.rb","lines":{"begin":5,"end":15}},"remediation_points":210000,"other_locations":[{"path":"app/forms/api/v1/events/create_form.rb","lines":{"begin":5,"end":15}},{"path":"app/forms/api/v1/wiki_pages/update_form.rb","lines":{"begin":4,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9555ad85eb39359bb8402681cc3b10d5","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 3 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/wiki_pages/update_form.rb","lines":{"begin":4,"end":14}},"remediation_points":210000,"other_locations":[{"path":"app/forms/api/v1/events/create_form.rb","lines":{"begin":5,"end":15}},{"path":"app/forms/api/v1/events/update_form.rb","lines":{"begin":5,"end":15}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 28**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"56aac6fca631a70ad7014c62f64a6931","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/records/update_operation_spec.rb","lines":{"begin":58,"end":71}},"remediation_points":470000,"other_locations":[{"path":"spec/operations/api/v1/records/create_operation_spec.rb","lines":{"begin":54,"end":65}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 41**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"e42fa4e95cda7528c79e8d012b54fcb9","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/api/v1/records/create_operation_spec.rb","lines":{"begin":54,"end":65}},"remediation_points":470000,"other_locations":[{"path":"spec/operations/api/v1/records/update_operation_spec.rb","lines":{"begin":58,"end":71}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 41**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2e638e1686208e49841211f9ffd26c25","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/administration/projects/index_operation_spec.rb","lines":{"begin":5,"end":15}},"remediation_points":430000,"other_locations":[{"path":"spec/operations/administration/users/index_operation_spec.rb","lines":{"begin":5,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 39**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"856498cd22ed206b8794beab9e2627ee","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/operations/administration/users/index_operation_spec.rb","lines":{"begin":5,"end":13}},"remediation_points":430000,"other_locations":[{"path":"spec/operations/administration/projects/index_operation_spec.rb","lines":{"begin":5,"end":15}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 39**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6a38053242860718b2595004953cafbf","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/administration/projects/records_controller_spec.rb","lines":{"begin":6,"end":13}},"remediation_points":410000,"other_locations":[{"path":"spec/controllers/administration/users/records_controller_spec.rb","lines":{"begin":6,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 38**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"330717b566e2dfc3f4d35b4512aef70c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/administration/users/records_controller_spec.rb","lines":{"begin":6,"end":13}},"remediation_points":410000,"other_locations":[{"path":"spec/controllers/administration/projects/records_controller_spec.rb","lines":{"begin":6,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 38**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b775432277935db97e32403e80dcac6f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/models/wiki_category_spec.rb","lines":{"begin":10,"end":20}},"remediation_points":390000,"other_locations":[{"path":"spec/models/folder_spec.rb","lines":{"begin":10,"end":20}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 37**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"13c95ffc5b7e0d5bd8752ead1ec36834","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/models/folder_spec.rb","lines":{"begin":10,"end":20}},"remediation_points":390000,"other_locations":[{"path":"spec/models/wiki_category_spec.rb","lines":{"begin":10,"end":20}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 37**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"40ed5c59be72aee3e0d5229b2a591785","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":68,"end":72}},"remediation_points":370000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":136,"end":140}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 36**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"039deb58e86166eef9af94bff72002b0","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":136,"end":140}},"remediation_points":370000,"other_locations":[{"path":"config/initializers/simple_form_bootstrap.rb","lines":{"begin":68,"end":72}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 36**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"039deb58e86166eef9af94bff72002b0","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/operations/concerns/api/v1/standard_update_operation_concern.rb","lines":{"begin":4,"end":12}},"remediation_points":330000,"other_locations":[{"path":"app/operations/concerns/api/v1/standard_create_operation_concern.rb","lines":{"begin":4,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6d9598ca055ed6ed00fbf9ecee6cd65a","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/operations/concerns/api/v1/standard_create_operation_concern.rb","lines":{"begin":4,"end":12}},"remediation_points":330000,"other_locations":[{"path":"app/operations/concerns/api/v1/standard_update_operation_concern.rb","lines":{"begin":4,"end":12}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"13b90b94882bdbb6de1062ba28be1ca8","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/contacts_controller_spec.rb","lines":{"begin":6,"end":14}},"remediation_points":330000,"other_locations":[{"path":"spec/controllers/api/v1/events_controller_spec.rb","lines":{"begin":6,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"847f944f00bceed17f539aef62c8acd6","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/events_controller_spec.rb","lines":{"begin":6,"end":14}},"remediation_points":330000,"other_locations":[{"path":"spec/controllers/api/v1/contacts_controller_spec.rb","lines":{"begin":6,"end":14}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 34**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b6b48e3283e37974e249fea500b964d5","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/issues_controller_spec.rb","lines":{"begin":6,"end":13}},"remediation_points":250000,"other_locations":[{"path":"spec/controllers/api/v1/board_lists_controller_spec.rb","lines":{"begin":6,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 30**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"3f8086b4edce227d619b3bc79812413c","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/controllers/api/v1/board_lists_controller_spec.rb","lines":{"begin":6,"end":13}},"remediation_points":250000,"other_locations":[{"path":"spec/controllers/api/v1/issues_controller_spec.rb","lines":{"begin":6,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 30**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c516a99e3033f0ca2b3e21a9506869d0","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/controllers/administration/wiki/categories_controller.rb","lines":{"begin":4,"end":20}},"remediation_points":230000,"other_locations":[{"path":"app/controllers/administration/archive/folders_controller.rb","lines":{"begin":4,"end":20}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"9a566c38e4674c77870a8af91ab20d19","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/controllers/administration/archive/folders_controller.rb","lines":{"begin":4,"end":20}},"remediation_points":230000,"other_locations":[{"path":"app/controllers/administration/wiki/categories_controller.rb","lines":{"begin":4,"end":20}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 29**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a390b9c4e29baff6b4f0998341604297","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/board_lists/update_form.rb","lines":{"begin":4,"end":13}},"remediation_points":150000,"other_locations":[{"path":"app/forms/api/v1/users/update_form.rb","lines":{"begin":4,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a279d3030b000e4009c174e626bc467f","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"app/forms/api/v1/users/update_form.rb","lines":{"begin":4,"end":13}},"remediation_points":150000,"other_locations":[{"path":"app/forms/api/v1/board_lists/update_form.rb","lines":{"begin":4,"end":13}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bf677a23ebe2417cb7837ab071d12676","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":38,"end":44}},"remediation_points":150000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":90,"end":96}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6ccbedf48f6670daac93c894690ddc04","severity":"minor","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 2 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":90,"end":96}},"remediation_points":150000,"other_locations":[{"path":"spec/forms/api/v1/attendance_events/create_form_spec.rb","lines":{"begin":38,"end":44}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 25**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"6ccbedf48f6670daac93c894690ddc04","severity":"minor","engine_name":"duplication"},{"type":"Issue","check_name":"Rubocop/Lint/UselessAssignment","description":"Useless assignment to variable - `mutation`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/operations/concerns/mvc_standard_update_operation_concern.rb","positions":{"begin":{"column":5,"line":10},"end":{"column":13,"line":10}}},"content":{"body":"This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n    assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc.\n\n### Example:\n\n    # bad\n\n    def some_method\n      some_var = 1\n      do_something\n    end\n\n### Example:\n\n    # good\n\n    def some_method\n      some_var = 1\n      do_something(some_var)\n    end"},"engine_name":"rubocop","fingerprint":"f5b827d1d8c9cd26c2536f1387d216ee","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/operations/administration/dashboard/show_operation.rb","positions":{"begin":{"column":5,"line":11},"end":{"column":12,"line":11}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"26a841513c27b4f1416f930ea887caa4","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/forms/administration/record_form.rb","positions":{"begin":{"column":3,"line":24},"end":{"column":10,"line":24}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"d3666a0a8092ad8ee54cdc0d469ad42a","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/registrations/create_mutation.rb","positions":{"begin":{"column":3,"line":14},"end":{"column":10,"line":14}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"b2a4f36fd5fff260574bafa05486d4da","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `protected`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/records/create_mutation.rb","positions":{"begin":{"column":3,"line":14},"end":{"column":12,"line":14}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"447e5d3a7a11d205d6b1e111eab88fe3","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/IndentationWidth","description":"Use 2 (not 0) spaces for indentation.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/records/update_mutation.rb","positions":{"begin":{"column":3,"line":5},"end":{"column":3,"line":5}}},"content":{"body":"This cop checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.\n\n### Example:\n    # bad\n    class A\n     def test\n      puts 'hello'\n     end\n    end\n\n    # good\n    class A\n      def test\n        puts 'hello'\n      end\n    end\n\n### Example: IgnoredPatterns: ['^\\s*module']\n    # bad\n    module A\n    class B\n      def test\n      puts 'hello'\n      end\n    end\n    end\n\n    # good\n    module A\n    class B\n      def test\n        puts 'hello'\n      end\n    end\n    end"},"engine_name":"rubocop","fingerprint":"e8d9a2d13042932b646d279c518c1319","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/issues/update_mutation.rb","positions":{"begin":{"column":3,"line":21},"end":{"column":10,"line":21}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"c5cbbd9ff9878ab629bb130e4760edca","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/organizations/create_mutation.rb","positions":{"begin":{"column":3,"line":12},"end":{"column":10,"line":12}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"52f7aed291a9ab8e29323d0eb21fa1e4","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/mutations/projects/destroy_mutation.rb","positions":{"begin":{"column":3,"line":13},"end":{"column":10,"line":13}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"cf1aa3a59cee505cde29dd37556f8209","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `protected`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/csv_index_concern.rb","positions":{"begin":{"column":1,"line":4},"end":{"column":10,"line":4}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"cb8a13f4a9d2e8bed672da63711375ec","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/IndentationWidth","description":"Use 2 (not 0) spaces for indentation.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/csv_index_concern.rb","positions":{"begin":{"column":1,"line":4},"end":{"column":1,"line":4}}},"content":{"body":"This cop checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.\n\n### Example:\n    # bad\n    class A\n     def test\n      puts 'hello'\n     end\n    end\n\n    # good\n    class A\n      def test\n        puts 'hello'\n      end\n    end\n\n### Example: IgnoredPatterns: ['^\\s*module']\n    # bad\n    module A\n    class B\n      def test\n      puts 'hello'\n      end\n    end\n    end\n\n    # good\n    module A\n    class B\n      def test\n        puts 'hello'\n      end\n    end\n    end"},"engine_name":"rubocop","fingerprint":"760b30aa7d8420b89fdbd6cbc486f259","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `protected`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/mvc_no_modify_standard_actions_concern.rb","positions":{"begin":{"column":1,"line":4},"end":{"column":10,"line":4}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"cc3c7c05b4a1519a9e19accea1953e13","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/IndentationWidth","description":"Use 2 (not 0) spaces for indentation.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/mvc_no_modify_standard_actions_concern.rb","positions":{"begin":{"column":1,"line":4},"end":{"column":1,"line":4}}},"content":{"body":"This cop checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.\n\n### Example:\n    # bad\n    class A\n     def test\n      puts 'hello'\n     end\n    end\n\n    # good\n    class A\n      def test\n        puts 'hello'\n      end\n    end\n\n### Example: IgnoredPatterns: ['^\\s*module']\n    # bad\n    module A\n    class B\n      def test\n      puts 'hello'\n      end\n    end\n    end\n\n    # good\n    module A\n    class B\n      def test\n        puts 'hello'\n      end\n    end\n    end"},"engine_name":"rubocop","fingerprint":"493308343d8c2f9d504df50d84f6a463","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `protected`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/api/v1/standart_actions.rb","positions":{"begin":{"column":5,"line":8},"end":{"column":14,"line":8}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"7f962554e77849c8e1e56be5a983fbc6","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/IndentationWidth","description":"Use 2 (not 0) spaces for indentation.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/mvc_modify_standard_actions_concern.rb","positions":{"begin":{"column":1,"line":4},"end":{"column":1,"line":4}}},"content":{"body":"This cop checks for indentation that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency cop which is the companion to this\none.\n\n### Example:\n    # bad\n    class A\n     def test\n      puts 'hello'\n     end\n    end\n\n    # good\n    class A\n      def test\n        puts 'hello'\n      end\n    end\n\n### Example: IgnoredPatterns: ['^\\s*module']\n    # bad\n    module A\n    class B\n      def test\n      puts 'hello'\n      end\n    end\n    end\n\n    # good\n    module A\n    class B\n      def test\n        puts 'hello'\n      end\n    end\n    end"},"engine_name":"rubocop","fingerprint":"9f1f2ef412fbccc8e01a63029d2577a6","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/UselessAssignment","description":"Useless assignment to variable - `result`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/concerns/mvc_modify_standard_actions_concern.rb","positions":{"begin":{"column":5,"line":6},"end":{"column":11,"line":6}}},"content":{"body":"This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n    assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc.\n\n### Example:\n\n    # bad\n\n    def some_method\n      some_var = 1\n      do_something\n    end\n\n### Example:\n\n    # good\n\n    def some_method\n      some_var = 1\n      do_something(some_var)\n    end"},"engine_name":"rubocop","fingerprint":"1ff3f10144a753f3fcbf23aeab71c6e3","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/administration_controller.rb","positions":{"begin":{"column":1,"line":11},"end":{"column":8,"line":11}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"55e8e6bb9dc059f221786e10f0acf2ba","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/administration/projects/base_controller.rb","positions":{"begin":{"column":5,"line":9},"end":{"column":12,"line":9}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"2cb5f6903b84e03b06de55a0b312d941","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/attendance_events_controller.rb","positions":{"begin":{"column":5,"line":26},"end":{"column":12,"line":26}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"5a7c8cc1ed9cd49df5ba3ec37076a334","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/current_records_controller.rb","positions":{"begin":{"column":3,"line":11},"end":{"column":10,"line":11}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"ef0682afd7faf9a6931f367c3fc94e18","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/user_issues_controller.rb","positions":{"begin":{"column":3,"line":10},"end":{"column":10,"line":10}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"84af79c31761cba186c588dbe943c055","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/board_lists/issues_controller.rb","positions":{"begin":{"column":7,"line":17},"end":{"column":14,"line":17}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"f87e25b7ba8a101c8d19bf196d7eb2a7","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/issues_controller.rb","positions":{"begin":{"column":5,"line":12},"end":{"column":12,"line":12}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"a9e584ccb22fe3d87ca1c44edad01e6d","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/api/v1/attendance_days_controller.rb","positions":{"begin":{"column":5,"line":25},"end":{"column":12,"line":25}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"c9bbc34b287b2270093daf2170e63856","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/controllers/sessions_controller.rb","positions":{"begin":{"column":1,"line":16},"end":{"column":8,"line":16}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"f1445c34a8188864b6c0b0d533fa96bf","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/preloaders/administration/records/preloader.rb","positions":{"begin":{"column":5,"line":22},"end":{"column":12,"line":22}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"0a9f10f0fc8c61e70fbee3767fe04d91","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/SpaceAfterSemicolon","description":"Space missing after semicolon.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/helpers/administration/users/configurations_helper.rb","positions":{"begin":{"column":21,"line":8},"end":{"column":22,"line":8}}},"content":{"body":"Checks for semicolon (;) not followed by some kind of space.\n\n### Example:\n    # bad\n    x = 1;y = 2\n\n    # good\n    x = 1; y = 2"},"engine_name":"rubocop","fingerprint":"ce5e1c9de93d8d9b4def74b1ebcf8d96","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/helpers/administration_helper.rb","positions":{"begin":{"column":1,"line":36},"end":{"column":8,"line":36}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"45b65df622585f3f998fd7266b27ed9c","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousOperator","description":"Ambiguous splat operator. Parenthesize the method arguments if it's surely a splat operator, or add a whitespace to the right of the `*` if it should be a multiplication.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/helpers/application_helper.rb","positions":{"begin":{"column":13,"line":42},"end":{"column":14,"line":42}}},"content":{"body":"This cop checks for ambiguous operators in the first argument of a\nmethod invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # The `*` is interpreted as a splat operator but it could possibly be\n    # a `*` method invocation (i.e. `do_something.*(some_array)`).\n    do_something *some_array\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(*some_array)"},"engine_name":"rubocop","fingerprint":"f4f20821c1d85636c54ef60238e5626d","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/inputs/image_preview_input.rb","positions":{"begin":{"column":1,"line":12},"end":{"column":8,"line":12}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"e3216f8b94a2ac5522400d82ee08825d","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/UselessAssignment","description":"Useless assignment to variable - `out`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/inputs/image_preview_input.rb","positions":{"begin":{"column":6,"line":9},"end":{"column":9,"line":9}}},"content":{"body":"This cop checks for every useless assignment to local variable in every\nscope.\nThe basic idea for this cop was from the warning of `ruby -cw`:\n\n    assigned but unused variable - foo\n\nCurrently this cop has advanced logic that detects unreferenced\nreassignments and properly handles varied cases such as branch, loop,\nrescue, ensure, etc.\n\n### Example:\n\n    # bad\n\n    def some_method\n      some_var = 1\n      do_something\n    end\n\n### Example:\n\n    # good\n\n    def some_method\n      some_var = 1\n      do_something(some_var)\n    end"},"engine_name":"rubocop","fingerprint":"4853627e6630145a739305372b0fb55b","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/queries/json_api_query.rb","positions":{"begin":{"column":1,"line":34},"end":{"column":8,"line":34}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"1f5d36971bc0e9ee2c3d6a46c2bc6d2f","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/queries/records_interval_query.rb","positions":{"begin":{"column":1,"line":10},"end":{"column":8,"line":10}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"b230c57e79e32adfcb0db9ee658c7596","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/queries/more_collection_query.rb","positions":{"begin":{"column":1,"line":24},"end":{"column":8,"line":24}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"b1e7e36eb3c430281ba3db1c1f041e98","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"app/queries/records_for_month_query.rb","positions":{"begin":{"column":1,"line":15},"end":{"column":8,"line":15}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"3b327bcae70a3b1d2fae5f5623f52ee8","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/Syntax","description":"unexpected token kRESCUE\n(Using Ruby 2.3 parser; configure using `TargetRubyVersion` parameter, under `AllCops`)","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/finders/mutation_finder.rb","positions":{"begin":{"column":7,"line":33},"end":{"column":13,"line":33}}},"content":{"body":"This is not actually a cop. It does not inspect anything. It just\nprovides methods to repack Parser's diagnostics/errors\ninto RuboCop's offenses."},"engine_name":"rubocop","fingerprint":"b8e2caef2a2c680a6a729d99523c7c62","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `protected`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/json_api_deserializer/has_many_base_mapper.rb","positions":{"begin":{"column":1,"line":14},"end":{"column":10,"line":14}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"350957f9457c7e9f1466108946db15f7","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/json_api_deserializer/attribute_mapper.rb","positions":{"begin":{"column":1,"line":13},"end":{"column":8,"line":13}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"a2241ba8d45599c3e3e064d4ccd21a2a","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/json_api_deserializer/belongs_to_mapper.rb","positions":{"begin":{"column":1,"line":14},"end":{"column":8,"line":14}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"5adabee56ffe7bc40094d9ecd5e8fe84","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/json_api_deserializer/has_many_sort_mapper.rb","positions":{"begin":{"column":1,"line":8},"end":{"column":8,"line":8}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"31778ae5074a0b19211844ac97ff3079","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/json_api_deserializer/has_many_mapper.rb","positions":{"begin":{"column":1,"line":8},"end":{"column":8,"line":8}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"e1fd037458b8cb2dc1ec8f21e8a211aa","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundAccessModifier","description":"Remove a blank line after `private`.","categories":["Style"],"remediation_points":50000,"location":{"path":"lib/hacks/knock_devise/authentificable.rb","positions":{"begin":{"column":5,"line":35},"end":{"column":12,"line":35}}},"content":{"body":"Access modifiers should be surrounded by blank lines.\n\n### Example: EnforcedStyle: around (default)\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n\n      def baz; end\n    end\n\n### Example: EnforcedStyle: only_before\n\n    # bad\n    class Foo\n      def bar; end\n      private\n      def baz; end\n    end\n\n    # good\n    class Foo\n      def bar; end\n\n      private\n      def baz; end\n    end\n"},"engine_name":"rubocop","fingerprint":"8c60bae9002458e0868f484e35cc3049","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":3},"end":{"column":8,"line":3}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":7},"end":{"column":8,"line":7}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":11},"end":{"column":8,"line":11}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":15},"end":{"column":8,"line":15}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":19},"end":{"column":8,"line":19}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":23},"end":{"column":8,"line":23}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":29},"end":{"column":8,"line":29}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":35},"end":{"column":8,"line":35}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":39},"end":{"column":8,"line":39}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":43},"end":{"column":8,"line":43}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":47},"end":{"column":8,"line":47}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":52},"end":{"column":8,"line":52}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":57},"end":{"column":8,"line":57}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Lint/AmbiguousRegexpLiteral","description":"Ambiguous regexp literal. Parenthesize the method arguments if it's surely a regexp literal, or add a whitespace to the right of the `/` if it should be a division.","categories":["Style"],"remediation_points":50000,"location":{"path":"features/step_definitions/api_v1.rb","positions":{"begin":{"column":7,"line":65},"end":{"column":8,"line":65}}},"content":{"body":"This cop checks for ambiguous regexp literals in the first argument of\na method invocation without parentheses.\n\n### Example:\n\n    # bad\n\n    # This is interpreted as a method invocation with a regexp literal,\n    # but it could possibly be `/` method invocations.\n    # (i.e. `do_something./(pattern)./(i)`)\n    do_something /pattern/i\n\n### Example:\n\n    # good\n\n    # With parentheses, there's no ambiguity.\n    do_something(/pattern/i)"},"engine_name":"rubocop","fingerprint":"d25cbb572680dd3b4525691943adb454","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/factories/user_projects.rb","positions":{"begin":{"column":1,"line":5},"end":{"column":1,"line":6}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"1831104e2dcf2dcbbf64b2affcf282e7","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/forms/api/v1/contacts/create_form_spec.rb","positions":{"begin":{"column":1,"line":26},"end":{"column":1,"line":27}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"5757a04bfd8a34e5e92243a81e979082","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/controllers/administration/wiki/pages_controller_spec.rb","positions":{"begin":{"column":1,"line":7},"end":{"column":1,"line":8}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"9a26c5689d41af4106d25678c14b4309","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/controllers/administration/wiki/categories_controller_spec.rb","positions":{"begin":{"column":1,"line":7},"end":{"column":1,"line":8}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"89a0fe5b56176beead54d2014473f280","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/controllers/administration/archive/documents_controller_spec.rb","positions":{"begin":{"column":1,"line":7},"end":{"column":1,"line":8}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"90981de794a94698331dc340f7a25cae","severity":"minor"},{"type":"Issue","check_name":"Rubocop/Layout/EmptyLinesAroundBlockBody","description":"Extra empty line detected at block body beginning.","categories":["Style"],"remediation_points":50000,"location":{"path":"spec/controllers/api/v1/shared_examples/show_action.rb","positions":{"begin":{"column":1,"line":26},"end":{"column":1,"line":27}}},"content":{"body":"This cop checks if empty lines around the bodies of blocks match\nthe configuration.\n\n### Example: EnforcedStyle: empty_lines\n    # good\n\n    foo do |bar|\n\n      # ...\n\n    end\n\n### Example: EnforcedStyle: no_empty_lines (default)\n    # good\n\n    foo do |bar|\n      # ...\n    end"},"engine_name":"rubocop","fingerprint":"026d632bd2dcbf9228880eab5d0a5b10","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/config/manifest.js","positions":{"begin":{"line":1,"column":1},"end":{"line":1,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"08eb7ad1eeb73a17dcbc84d591a929e7","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/config/manifest.js","positions":{"begin":{"line":2,"column":1},"end":{"line":2,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"08eb7ad1eeb73a17dcbc84d591a929e7","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/config/manifest.js","positions":{"begin":{"line":3,"column":1},"end":{"line":3,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"08eb7ad1eeb73a17dcbc84d591a929e7","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":4,"column":1},"end":{"line":4,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec17079db4d48e4716e80b1da19cb1c8","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":5,"column":1},"end":{"line":5,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec17079db4d48e4716e80b1da19cb1c8","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"spaced-comment","description":"Expected space or tab after '//' in comment.","content":{"body":"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":6,"column":1},"end":{"line":6,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ec17079db4d48e4716e80b1da19cb1c8","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"space-before-function-paren","description":"Missing space before function parentheses.","content":{"body":"# Require or disallow a space before function parenthesis (space-before-function-paren)\n\nWhen formatting a function, whitespace is allowed between the function name or `function` keyword and the opening paren. Named functions also require a space between the `function` keyword and the function name, but anonymous functions require no whitespace. For example:\n\n```js\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n\nvar anonymousWithoutSpace = function() {};\n\nvar anonymousWithSpace = function () {};\n```\n\nStyle guides may require a space after the `function` keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.\n\n## Rule Details\n\nThis rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn't match the preferences specified.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```js\n{\n    \"space-before-function-paren\": [\"error\", \"always\"],\n    // or\n    \"space-before-function-paren\": [\"error\", {\n        \"anonymous\": \"always\",\n        \"named\": \"always\",\n        \"asyncArrow\": \"ignore\"\n    }],\n}\n```\n\n* `always` (default) requires a space followed by the `(` of arguments.\n* `never` disallows any space followed by the `(` of arguments.\n\nThe string option does not check async arrow function expressions for backward compatibility.\n\nYou can also use a separate option for each type of function.\nEach of the following options can be set to `\"always\"`, `\"never\"`, or `\"ignore\"`.\nDefault is `\"always\"` basically.\n\n* `anonymous` is for anonymous function expressions (e.g. `function () {}`).\n* `named` is for named function expressions (e.g. `function foo () {}`).\n* `asyncArrow` is for async arrow function expressions (e.g. `async () => {}`).\n  `asyncArrow` is set to `\"ignore\"` by default for backwards compatibility.\n\n### \"always\"\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n\n// async arrow function expressions are ignored by default.\nvar foo = async () => 1\nvar foo = async() => 1\n```\n\n### \"never\"\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n\n// async arrow function expressions are ignored by default.\nvar foo = async () => 1\nvar foo = async() => 1\n```\n\n### `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n\nvar foo = async(a) => await a\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n\nvar foo = async (a) => await a\n```\n\n### `{\"anonymous\": \"never\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n```\n\n### `{\"anonymous\": \"ignore\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function () {\n    // ...\n};\n\nfunction foo () {\n    // ...\n}\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before function parenthesis.\n\n## Related Rules\n\n* [space-after-keywords](space-after-keywords.md)\n* [space-return-throw-case](space-return-throw-case.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":8,"column":10},"end":{"line":8,"column":10}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"5eccb3cd99b4ff85b04278405268dcbe","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"semi","description":"Extra semicolon.","content":{"body":"# require or disallow semicolons instead of ASI (semi)\n\nJavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as **automatic semicolon insertion (ASI)** and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:\n\n```js\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\nOn the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.\n\nIn the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.\n\nHowever, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:\n\n```js\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\nThis may look like a `return` statement that returns an object literal, however, the JavaScript engine will interpret this code as:\n\n```js\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\nEffectively, a semicolon is inserted after the `return` statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the [no-unreachable](no-unreachable.md) rule will protect your code from such cases.\n\nOn the other side of the argument are those who says that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:\n\n```js\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\nIn this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The [no-unexpected-multiline](no-unexpected-multiline.md) rule can protect your code from such cases.\n\nAlthough ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a `\\n` character always ends a statement (just like a semicolon) unless one of the following is true:\n\n1. The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n1. The line is `--` or `++` (in which case it will decrement/increment the next token.)\n1. It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n1. The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\n## Rule Details\n\nThis rule enforces consistent use of semicolons.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"always\"` (default) requires semicolons at the end of statements\n* `\"never\"` disallows semicolons as the end of statements (except to disambiguate statements beginning with `[`, `(`, `/`, `+`, or `-`)\n\nObject option:\n\n* `\"omitLastInOneLineBlock\": true` ignores the last semicolon in a block in which its braces (and therefore the content of the block) are in the same line\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n```\n\n#### omitLastInOneLineBlock\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineBlock\": true }` options:\n\n```js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n```\n\n## When Not To Use It\n\nIf you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.\n\n## Further Reading\n\n* [An Open Letter to JavaScript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\n* [JavaScript Semicolon Insertion](http://inimino.org/~inimino/blog/javascript_semicolons)\n\n## Related Rules\n\n* [no-extra-semi](no-extra-semi.md)\n* [no-unexpected-multiline](no-unexpected-multiline.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":9,"column":30},"end":{"line":9,"column":30}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ad6d533fae0a72b44498562bf7b70995","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef","description":"'App' is not defined.","content":{"body":"# Disallow Undeclared Variables (no-undef)\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).\n\n## Rule Details\n\nAny reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nExamples of **correct** code for this rule with `global` declaration:\n\n```js\n/*global someFunction b:true*/\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nThe `b:true` syntax in `/*global */` indicates that assignment to `b` is correct.\n\nExamples of **incorrect** code for this rule with `global` declaration:\n\n```js\n/*global b*/\n/*eslint no-undef: \"error\"*/\n\nb = 10;\n```\n\nBy default, variables declared in `/*global */` are read-only, therefore assignment is incorrect.\n\n## Options\n\n* `typeof` set to true will warn for variables used inside typeof check (Default false).\n\n### typeof\n\nExamples of **correct** code for the default `{ \"typeof\": false }` option:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\nYou can use this option if you want to prevent `typeof` check on a variable which has not been declared.\n\nExamples of **incorrect** code for the `{ \"typeof\": true }` option:\n\n```js\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\nExamples of **correct** code for the `{ \"typeof\": true }` option with `global` declaration:\n\n```js\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n## Environments\n\nFor convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](http://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.\n\n### browser\n\nExamples of **correct** code for this rule with `browser` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(function() {\n    alert(\"Hello\");\n});\n```\n\n### node\n\nExamples of **correct** code for this rule with `node` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env node*/\n\nvar fs = require(\"fs\");\nmodule.exports = function() {\n    console.log(fs);\n};\n```\n\n## When Not To Use It\n\nIf explicit declaration of global variables is not to your taste.\n\n## Compatibility\n\nThis rule provides compatibility with treatment of global variables in [JSHint](http://www.jshint.com) and [JSLint](http://www.jslint.com).\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":11,"column":3},"end":{"line":11,"column":3}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"87f53b6116b3407c834c2b83a2dfceeb","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef","description":"'ActionCable' is not defined.","content":{"body":"# Disallow Undeclared Variables (no-undef)\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).\n\n## Rule Details\n\nAny reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nExamples of **correct** code for this rule with `global` declaration:\n\n```js\n/*global someFunction b:true*/\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nThe `b:true` syntax in `/*global */` indicates that assignment to `b` is correct.\n\nExamples of **incorrect** code for this rule with `global` declaration:\n\n```js\n/*global b*/\n/*eslint no-undef: \"error\"*/\n\nb = 10;\n```\n\nBy default, variables declared in `/*global */` are read-only, therefore assignment is incorrect.\n\n## Options\n\n* `typeof` set to true will warn for variables used inside typeof check (Default false).\n\n### typeof\n\nExamples of **correct** code for the default `{ \"typeof\": false }` option:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\nYou can use this option if you want to prevent `typeof` check on a variable which has not been declared.\n\nExamples of **incorrect** code for the `{ \"typeof\": true }` option:\n\n```js\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\nExamples of **correct** code for the `{ \"typeof\": true }` option with `global` declaration:\n\n```js\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n## Environments\n\nFor convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](http://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.\n\n### browser\n\nExamples of **correct** code for this rule with `browser` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(function() {\n    alert(\"Hello\");\n});\n```\n\n### node\n\nExamples of **correct** code for this rule with `node` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env node*/\n\nvar fs = require(\"fs\");\nmodule.exports = function() {\n    console.log(fs);\n};\n```\n\n## When Not To Use It\n\nIf explicit declaration of global variables is not to your taste.\n\n## Compatibility\n\nThis rule provides compatibility with treatment of global variables in [JSHint](http://www.jshint.com) and [JSLint](http://www.jslint.com).\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":11,"column":15},"end":{"line":11,"column":15}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"87f53b6116b3407c834c2b83a2dfceeb","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"semi","description":"Extra semicolon.","content":{"body":"# require or disallow semicolons instead of ASI (semi)\n\nJavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as **automatic semicolon insertion (ASI)** and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:\n\n```js\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\nOn the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.\n\nIn the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.\n\nHowever, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:\n\n```js\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\nThis may look like a `return` statement that returns an object literal, however, the JavaScript engine will interpret this code as:\n\n```js\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\nEffectively, a semicolon is inserted after the `return` statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the [no-unreachable](no-unreachable.md) rule will protect your code from such cases.\n\nOn the other side of the argument are those who says that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:\n\n```js\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\nIn this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The [no-unexpected-multiline](no-unexpected-multiline.md) rule can protect your code from such cases.\n\nAlthough ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a `\\n` character always ends a statement (just like a semicolon) unless one of the following is true:\n\n1. The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n1. The line is `--` or `++` (in which case it will decrement/increment the next token.)\n1. It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n1. The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\n## Rule Details\n\nThis rule enforces consistent use of semicolons.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"always\"` (default) requires semicolons at the end of statements\n* `\"never\"` disallows semicolons as the end of statements (except to disambiguate statements beginning with `[`, `(`, `/`, `+`, or `-`)\n\nObject option:\n\n* `\"omitLastInOneLineBlock\": true` ignores the last semicolon in a block in which its braces (and therefore the content of the block) are in the same line\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n```\n\n#### omitLastInOneLineBlock\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineBlock\": true }` options:\n\n```js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n```\n\n## When Not To Use It\n\nIf you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.\n\n## Further Reading\n\n* [An Open Letter to JavaScript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\n* [JavaScript Semicolon Insertion](http://inimino.org/~inimino/blog/javascript_semicolons)\n\n## Related Rules\n\n* [no-extra-semi](no-extra-semi.md)\n* [no-unexpected-multiline](no-unexpected-multiline.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":11,"column":43},"end":{"line":11,"column":43}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ad6d533fae0a72b44498562bf7b70995","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"padded-blocks","description":"Block must not be padded by blank lines.","content":{"body":"# require or disallow padding within blocks (padded-blocks)\n\nSome style guides require block statements to start and end with blank lines. The goal is\nto improve readability by visually separating the block content and the surrounding code.\n\n```js\nif (a) {\n\n    b();\n\n}\n```\n\nSince it's good to have a consistent code style, you should either always write\npadded blocks or never do it.\n\n## Rule Details\n\nThis rule enforces consistent empty line padding within blocks.\n\n## Options\n\nThis rule has one option, which can be a string option or an object option.\n\nString option:\n\n* `\"always\"` (default) requires empty lines at the beginning and ending of block statements (except `switch` statements and classes)\n* `\"never\"` disallows empty lines at the beginning and ending of block statements (except `switch` statements and classes)\n\nObject option:\n\n* `\"blocks\"` require or disallow padding within block statements\n* `\"classes\"` require or disallow padding within classes\n* `\"switches\"` require or disallow padding within `switch` statements\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n```\n\n### blocks\n\nExamples of **incorrect** code for this rule with the `{ \"blocks\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"blocks\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"blocks\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"blocks\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n```\n\n### classes\n\nExamples of **incorrect** code for this rule with the `{ \"classes\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"classes\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"classes\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"classes\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\n### switches\n\nExamples of **incorrect** code for this rule with the `{ \"switches\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"switches\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n\nif (a) {\n    b();\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"switches\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"switches\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n\nif (a) {\n\n    b();\n\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of padding within blocks.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":13,"column":1},"end":{"line":13,"column":1}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ef1b66b810deee4e4f286322d8091647","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"semi","description":"Extra semicolon.","content":{"body":"# require or disallow semicolons instead of ASI (semi)\n\nJavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as **automatic semicolon insertion (ASI)** and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:\n\n```js\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\nOn the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.\n\nIn the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.\n\nHowever, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:\n\n```js\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\nThis may look like a `return` statement that returns an object literal, however, the JavaScript engine will interpret this code as:\n\n```js\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\nEffectively, a semicolon is inserted after the `return` statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the [no-unreachable](no-unreachable.md) rule will protect your code from such cases.\n\nOn the other side of the argument are those who says that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:\n\n```js\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\nIn this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The [no-unexpected-multiline](no-unexpected-multiline.md) rule can protect your code from such cases.\n\nAlthough ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a `\\n` character always ends a statement (just like a semicolon) unless one of the following is true:\n\n1. The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n1. The line is `--` or `++` (in which case it will decrement/increment the next token.)\n1. It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n1. The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\n## Rule Details\n\nThis rule enforces consistent use of semicolons.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"always\"` (default) requires semicolons at the end of statements\n* `\"never\"` disallows semicolons as the end of statements (except to disambiguate statements beginning with `[`, `(`, `/`, `+`, or `-`)\n\nObject option:\n\n* `\"omitLastInOneLineBlock\": true` ignores the last semicolon in a block in which its braces (and therefore the content of the block) are in the same line\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n```\n\n#### omitLastInOneLineBlock\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineBlock\": true }` options:\n\n```js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n```\n\n## When Not To Use It\n\nIf you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.\n\n## Further Reading\n\n* [An Open Letter to JavaScript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\n* [JavaScript Semicolon Insertion](http://inimino.org/~inimino/blog/javascript_semicolons)\n\n## Related Rules\n\n* [no-extra-semi](no-extra-semi.md)\n* [no-unexpected-multiline](no-unexpected-multiline.md)\n* [semi-spacing](semi-spacing.md)\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/assets/javascripts/cable.js","positions":{"begin":{"line":13,"column":14},"end":{"line":13,"column":14}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"ad6d533fae0a72b44498562bf7b70995","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-unused-vars","description":"'app' is assigned a value but never used.","content":{"body":"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and parameters of functions.\n\nA variable is considered to be used if any of the following are true:\n\n* It represents a function that is called (`doSomething()`)\n* It is read (`var y = x`)\n* It is passed into a function as an argument (`doSomething(x)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever assigned to (`var x = 5`) or declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - only the last argument must be used. This allows you, for instance, to have two named parameters to a function and as long as you use the second argument, ESLint will not warn you about the first. This is the default setting.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 1 error\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz) {\n    return baz;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/sebmarkbage/ecmascript-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/javascript/packs/application.js","positions":{"begin":{"line":47,"column":7},"end":{"line":47,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"bacc2cc9bfe032772a3bd76068bd0a72","severity":"minor"},{"type":"issue","categories":["Bug Risk"],"check_name":"no-undef","description":"'Turbolinks' is not defined.","content":{"body":"# Disallow Undeclared Variables (no-undef)\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).\n\n## Rule Details\n\nAny reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nExamples of **correct** code for this rule with `global` declaration:\n\n```js\n/*global someFunction b:true*/\n/*eslint no-undef: \"error\"*/\n\nvar a = someFunction();\nb = 10;\n```\n\nThe `b:true` syntax in `/*global */` indicates that assignment to `b` is correct.\n\nExamples of **incorrect** code for this rule with `global` declaration:\n\n```js\n/*global b*/\n/*eslint no-undef: \"error\"*/\n\nb = 10;\n```\n\nBy default, variables declared in `/*global */` are read-only, therefore assignment is incorrect.\n\n## Options\n\n* `typeof` set to true will warn for variables used inside typeof check (Default false).\n\n### typeof\n\nExamples of **correct** code for the default `{ \"typeof\": false }` option:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\nYou can use this option if you want to prevent `typeof` check on a variable which has not been declared.\n\nExamples of **incorrect** code for the `{ \"typeof\": true }` option:\n\n```js\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\nExamples of **correct** code for the `{ \"typeof\": true }` option with `global` declaration:\n\n```js\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n## Environments\n\nFor convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](http://eslint.org/docs/user-guide/configuring#specifying-environments).  A few examples are given below.\n\n### browser\n\nExamples of **correct** code for this rule with `browser` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(function() {\n    alert(\"Hello\");\n});\n```\n\n### node\n\nExamples of **correct** code for this rule with `node` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env node*/\n\nvar fs = require(\"fs\");\nmodule.exports = function() {\n    console.log(fs);\n};\n```\n\n## When Not To Use It\n\nIf explicit declaration of global variables is not to your taste.\n\n## Compatibility\n\nThis rule provides compatibility with treatment of global variables in [JSHint](http://www.jshint.com) and [JSLint](http://www.jslint.com).\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"app/javascript/vue_turbolinks.js","positions":{"begin":{"line":4,"column":7},"end":{"line":4,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"903dd3abd7eedd268be211c42cf40ad7","severity":"minor"}]

image: $CONTAINER_RELEASE_IMAGE

stages:
  - build
  - test
  - deploy
  - test_production
  - tag_latest

variables:
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  POSTGRES_PASSWORD: password
  POSTGRES_DB: root
  POSTGRES_USER: root
  DATABASE_URL: postgres://root:password@postgres/root
  GIT_STRATEGY: none
  MINIO_ACCESS_KEY: access_key
  MINIO_SECRET_KEY: secret_key
  AWS_ENABLED: "true"
  AWS_KEY: access_key
  AWS_SECRET: secret_key
  AWS_ENDPOINT: http://minio:9000
  TZ: Europe/Berlin

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: clone
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CONTAINER_RELEASE_IMAGE --cache=true
  only:
    - merge_requests

helm_lint:
  stage: test
  image: aronwolf/helm-doctl
  variables:
    GIT_STRATEGY: clone
  only:
    - merge_requests
  script:
    - helm lint -f values.yaml chart/

traceroute:
  stage: test
  services:
    - postgres:latest
  only:
    - merge_requests
  script:
    - cd /app
    - FAIL_ON_ERROR=1 DATABASE_URL=postgres://root:password@postgres/root rake traceroute

rspec:
  stage: test
  services:
    - postgres:latest
  variables:
    COVERAGE: "true"
  artifacts:
    paths:
      - coverage/
    expire_in: 30 days
  cache:
    paths:
      - node_modules/
      - .yarn
  only:
    - merge_requests
  script:
    - cp -rT /app .
    - yarn install --cache-folder .yarn
    - rspec

eslint:
  stage: test
  cache:
    paths:
      - node_modules/
      - .yarn
  only:
    - merge_requests
  script:
    - cp -rT /app .
    - yarn install --cache-folder .yarn
    - yarn eslint

rubocop:
  stage: test
  only:
    - merge_requests
  script:
    - cd /app
    - rubocop

mocha:
  stage: test
  cache:
    paths:
    - node_modules/
    - .yarn
  only:
    - merge_requests
  script:
    - cp -rT /app .
    - yarn install --cache-folder .yarn
    - yarn test

.cucumber:
  stage: test
  variables:
    GIT_STRATEGY: clone
    DOCKER_HOST: tcp://docker:2375
  image:
    name: docker/compose:1.24.1
    entrypoint: ["/bin/sh", "-c"]
  artifacts:
    when: on_failure
    paths:
      - screenshots
      - log
    expire_in: 30 days
    expire_in: 30 days
  services:
    - docker:dind
  only:
    changes:
      - app/**/*
      - config/**/*
      - lib/**/*
      - features/**/*
      - bin/**/*
      - Dockerfile
      - docker-compose.gitlab.yml
      - .dockerignore
      - package.json
      - Gemfile.lock
      - Gemfile
      - yarn.lock
    refs:
      - merge_requests
  script:
    - export IMAGE=$CONTAINER_RELEASE_IMAGE
    - docker-compose -f docker-compose.gitlab.yml run payment mix ecto.setup
    - docker-compose -f docker-compose.gitlab.yml run app rake db:setup
    - docker-compose -f docker-compose.gitlab.yml up -d
    - docker-compose -f docker-compose.gitlab.yml run -e CI_NODE_INDEX=$CI_NODE_INDEX -e CI_NODE_TOTAL=$CI_NODE_TOTAL -e REGEX=$REGEX -e RAILS_ENV=test app bin/ci_split_cucumber.sh

cucumber_api:
  extends: .cucumber
  variables:
    REGEX: "features/api.*feature" 
    CI_NODE_INDEX: 1
    CI_NODE_TOTAL: 1

cucumber:
  extends: .cucumber
  parallel: 4
  variables:
    REGEX: "features/[^a][^p][^i].*feature" 

deploy:
  stage: deploy
  image: alpine/k8s:1.16.8
  variables:
    GIT_STRATEGY: clone
  environment:
    name: production
    url: https://ticktensio.com
  script:
    - mkdir -p ~/.kube/
    - cp $KUBE_CONFIG ~/.kube/config
    - kubectl delete jobs -n cmc-production --all
    - helm upgrade cmc-production chart --install --wait
        --timeout=800s
        -f values.yaml
        --set image.tag=$CI_COMMIT_SHA
        --set image.repository=$CI_REGISTRY_IMAGE
        --set postgresql.postgresqlPassword=$DB_PASSWORD
        --set postgresql.postgresqlPostgresPassword=$DB_PASSWORD
        --set admin_password=$ADMIN_PASSWORD
        --set webAws.key=$WEB_AWS_KEY
        --set webAws.secret=$WEB_AWS_SECRET
        --set webDeployment.sentryDsn=$SENTRY_DSN
        --set mailer.password=$MAILER_PASSWORD
        --set google.clientId=$GOOGLE_CLIENT_ID
        --set google.calenderSecret=$GOOGLE_CALENDER_SECRET
        --set reCaptcha.siteKey=$RECAPTCHA_SITE_KEY 
        --set reCaptcha.secretKey=$RECAPTCHA_SECRET_KEY
        --set reCaptcha.ignoreKey=$RECAPTCHA_IGNORE_KEY
        --set payment.secret.token=$PAYMENT_TOKEN
        --namespace cmc-production
  only:
    - master

pages:
  stage: deploy
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - rspec
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
  except:
    - schedules

test_production:
  stage: test_production
  services:
    - name: selenium/standalone-chrome-debug
      alias: selenium
  variables:
    SELENIUM_HOST: selenium
    SELENIUM_PORT: 4444
  script:
    - cd /app
    - bin/production_tests.rb
  only:
    - master

tag_latest:
  stage: tag_latest
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_RELEASE_IMAGE $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

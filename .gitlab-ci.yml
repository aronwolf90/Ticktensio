image: $CONTAINER_RELEASE_IMAGE

stages:
  #  - build
  - test
  - deploy
  - test_production
  - tag_latest

variables:
  CONTAINER_RELEASE_IMAGE: registry.gitlab.com/cmc_system/cmc/feature-migrate-dc-gitlab-to-gitlab-ci:4a8803baef27115af0fbcdc2db8036c1aa2ec4e7
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgres://postgres:postgres@postgres/database
  GIT_STRATEGY: none
  MINIO_ACCESS_KEY: access_key
  MINIO_SECRET_KEY: secret_key
  AWS_ENABLED: "true"
  AWS_KEY: access_key
  AWS_SECRET: secret_key
  AWS_ENDPOINT: http://minio:9000
  TZ: Europe/Berlin

  #build:
  #  stage: build
  #  image: docker:latest
  #  variables:
  #    GIT_STRATEGY: fetch
  #  services:
  #    - docker:dind
  #  script:
  #    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  #    - docker pull $CI_REGISTRY_IMAGE
  #    - docker build --cache-from $CI_REGISTRY_IMAGE -t $CONTAINER_RELEASE_IMAGE .
  #    - docker push $CONTAINER_RELEASE_IMAGE

helm_lint:
  stage: test
  image: aronwolf/helm-doctl
  variables:
    GIT_STRATEGY: clone
  script:
    - helm lint -f values.yaml chart/

traceroute:
  stage: test
  services:
    - postgres:latest
  script:
    - cd /app
    - FAIL_ON_ERROR=1 DATABASE_URL=postgres://root:password@postgres/root rake traceroute

rspec:
  stage: test
  services:
    - postgres:latest
  variables:
    COVERAGE: "true"
  artifacts:
    paths:
      - coverage/
    expire_in: 30 days
  script:
    - cd /app
    - rspec
    - mv /app/coverage/ $CI_PROJECT_DIR

eslint:
  stage: test
  script:
    - cd /app
    - yarn eslint

rubocop:
  stage: test
  script:
    - cd /app
    - rubocop

mocha:
  stage: test
  script:
    - cd /app
    - yarn test

.cucumber:
  stage: test
  variables:
    GIT_STRATEGY: fetch
    FF_NETWORK_PER_BUILD: "true"
    AWS_ENDPOINT: "http://storage.lvh.me:9000"
    PAYMENT_ENABLED: "true"
    NO_RAISE_MAILER_ERRORS: "true"
    REDIS_URL: "redis://redis"
    DISABLE_DATABASE_ENVIRONMENT_CHECK: "true"
    CAPYBARA_RUN_SERVER: "false"
    TEST_PORT: "3000"
    SELENIUM_HOST: selenium
    SELENIUM_PORT: 4444
    RAILS_SERVE_STATIC_FILES: "true"
    SEEDS_FOLDER: development
    TEST_HOST: "lvh.me"
    SECRET_KEY_BASE:  "5d1ee3590cdac32f527d1c4c835578859ecbd50ac1b03ff6d4689c19d732b5c9050ceb66d8b625cacadb1c1228095a7fd855933ce1881075a577e7cb8aea3432"
    MAILER_SMTP_DOMAIN: mail_hog
    MAILER_PORT: 1025 
  artifacts:
    when: on_failure
    paths:
      - screenshots
    expire_in: 30 days
  services:
    - name: redis
    - name: postgres:11
      alias: db
      command: ['-c', 'fsync=off']
    - name: minio/minio 
      entrypoint: ['sh']
      command: ['-c', 'mkdir -p /data/cmc; /usr/bin/minio server /data']
      alias: storage.lvh.me
    - name: mailhog/mailhog
      alias: mail_hog
    - name: selenium/standalone-chrome-debug
      alias: selenium 
    - name: registry.gitlab.com/web_utils/mockserver-docker:latest
      alias: stripe_mock 
      command: ['sh', '-c', 'mockserver -p 8080 -m /build/stripe_mocks']
    - name: registry.gitlab.com/cmc_system/cmc_payment 
      alias: payment
      command: ['sh', '-c', 'export DATABASE_URL=postgres://postgres:postgres@postgres/payment; mix ecto.setup; mix phx.server']
    - name: $CONTAINER_RELEASE_IMAGE
      command: ['sh', '-c', 'curl lvh.me:3000 --retry 30 --retry-connrefused --retry-delay 3 && RAILS_ENV=production bundle exec sidekiq -C config/sidekiq.yml']
      alias: worker
    - name: $CONTAINER_RELEASE_IMAGE
      command: ['sh', '-c', 'RAILS_ENV=production rake db:setup && rails s -b 0.0.0.0']
      alias: lvh.me
  before_script:
    - export TEST_HOST="$(getent hosts lvh.me | awk '{ print $1 }').xip.io"
    - curl $TEST_HOST:3000 --retry 20 --retry-connrefused --retry-delay 3
    - curl worker:7433 --retry 20 --retry-connrefused --retry-delay 3

cucumber_api:
  extends: .cucumber
  script:
    - cucumber features/api

cucumber:
  extends: .cucumber
  parallel: 4
  script:
    - bin/ci_split_cucumber.sh

backup:
  stage: test
  image: aronwolf/helm-doctl
  environment:
    name: production
    url: https://ticktensio.com
  script:
    - doctl kubernetes cluster kubeconfig save webcloudpower
    - velero backup create ticktensio-deploy-$(date +%Y%m%d%H%M%S) --include-namespaces cmc-production
  only:
    - master

deploy:
  stage: deploy
  image: aronwolf/helm-doctl
  variables:
    GIT_STRATEGY: clone
  environment:
    name: production
    url: https://ticktensio.com
  script:
    - doctl kubernetes cluster kubeconfig save webcloudpower
    - helm init --client-only
    - kubectl delete jobs -n cmc-production --all
    - helm upgrade cmc-production chart --install --wait --force
        --timeout=800
        -f values.yaml
        --set image.tag=$CI_COMMIT_SHA
        --set image.repository=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
        --set postgresql.postgresqlPassword=$DB_PASSWORD
        --set postgresql.postgresqlPostgresPassword=$DB_PASSWORD
        --set admin_password=$ADMIN_PASSWORD
        --set webAws.key=$WEB_AWS_KEY
        --set webAws.secret=$WEB_AWS_SECRET
        --set webDeployment.sentryDsn=$SENTRY_DSN
        --set mailer.password=$MAILER_PASSWORD
        --set google.clientId=$GOOGLE_CLIENT_ID
        --set google.calenderSecret=$GOOGLE_CALENDER_SECRET
        --set reCaptcha.siteKey=$RECAPTCHA_SITE_KEY 
        --set reCaptcha.secretKey=$RECAPTCHA_SECRET_KEY
        --set reCaptcha.ignoreKey=$RECAPTCHA_IGNORE_KEY
        --namespace cmc-production
  only:
    - master

pages:
  stage: deploy
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - rspec
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
  except:
    - schedules
  except:
    - schedules

test_production:
  stage: test_production
  services:
    - name: selenium/standalone-chrome-debug
      alias: selenium
  variables:
    SELENIUM_HOST: selenium
    SELENIUM_PORT: 4444
  script:
    - cd /app
    - bin/production_tests.rb
  only:
    - master

tag_latest:
  stage: tag_latest
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_RELEASE_IMAGE $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master
